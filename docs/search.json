[{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 mdlvalr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/articles/about.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"About the package","text":"MDL multiple variant calling assays repeated wet-lab bioinformatics pipeline development. need good way compare variant calling results changes made process. Therefore, developed “concordance” framework applied majority pipelines.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/articles/about.html","id":"the-problem","dir":"Articles","previous_headings":"","what":"The problem","title":"About the package","text":"various pipelines slightly different output files (return VCFs, return Excel tables, etc.). Therefore, like create single unified concordance method compare vs. B, pipelines – really possible.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/articles/about.html","id":"a-potential-solution","dir":"Articles","previous_headings":"","what":"A potential solution","title":"About the package","text":"one way, build multiple different concordance scripts handle specific pipelines. Alternatively, build basic framework concordance analysis can adjusted pipelines, try standardize main steps. example, basic approach mdlvalr exploit R programming language feature, called function “Methods”. can build one function (e.g. compare_vars()) “compare variant tables”, create different methods correspond pipeline interest. idea exploited widely R. example, execute print(object) R, looks see class object , returns class-specific print . R knows print linear model fit vs data frame (print(fit) vs print(df)) screen using print() function. Thus, print() generic function R employs different methods. list methods available generic print function, can run: methods(print). load certain libraries (e.g. tidyverse), many methods avaialble. mdlvalr can design basic concordance steps generic functions, write pipeline specific methods, needed. example, R code, generic function name step1 pipeline specific method name step1.pipeline1. Using approach, class(object) includes class name “pipeline1”, can run step1(object) step1 function automatically apply pipeline1 method. Alternatively, simply build pipeline specific functions (e.g. step1_pipeline1()) every step pipeline combination. Exploiting R generics/methods framework simply makes code (future code maintenance) uniform.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/articles/about.html","id":"a-general-concordance-framework","dir":"Articles","previous_headings":"","what":"A general concordance framework","title":"About the package","text":"step (except get_data()), generic function created. generic function point pipeline-specific “method” used (based class object). R generic function purpose function take sample sheet comparisons input capture (read-) necessary data complete analysis. pipeline needs specified function. standard R list object output function, list also new R class added attributes: name pipeline (e.g. hybcap). purpose function add new columns variant coverage tables. coding sequence (CDS) table used determine whether variant sample table falls within exon . results new column (within_refseq_cds) added table “yes” “” values. Frequently, clinicians mostly care concordance vars coverage regions based thresholds. thresholds can ad hoc. Therefore, can specify pipeline-specific R filtering logic var_pass_fail_logic cov_pass_fail_logic parameters. variant coverage row passes logic test (.e. TRUE), new column added table indicating “pass” “fail”. variants coverage rows removed tables. purpose function compare variant coverage tables comparison group. function runs dylyr::full_join() (among joins) set common columns (e.g. CHROM, REF, ALT, etc.). possible splits data captured sub-tables saved R list object. purpose function add new columns “compared” data tables. Using pass/fail labels (add_flags()) along group membership (e.g. vars_in_s1_not_in_s2), can label variants passing failing one samples compared. variants removed tables Finally, comparing tables labeling vars/coverage rows, can use labels actually filter tables. Tables can filtered smaller “pass-”, “pass sample1, fail sample2” type tables. filtered tables added input list object. function simply reports size various tables list object. example: total number rows var_1 table, number rows vars_in_common_s1pass_s2pass table. comparison, function writes various tables generated Excel workbook, using tabs represent different splits data. Alternate exports data imagined well (.e. excel files – maybe Rmarkdown, etc.).","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/articles/hybcap.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example: hybcap","text":"vignette demonstrate use mdlvalr package functions generate concordance analysis data generated hybrid capture pipeline. Load required packages.","code":"library(mdlvalr) library(tidyverse) library(glue) library(openxlsx) library(plyranges)"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/articles/hybcap.html","id":"get-input-data--use-the-provided-example-data-that-comes-with-the-mdlvalr-r-package-","dir":"Articles","previous_headings":"","what":"Get input data. Use the provided example data that comes with the mdlvalr R package.","title":"Example: hybcap","text":"Load example data objects Get path package extra data dir. Find real file paths variant coverage files. Create sample sheet comparisons","code":"# Assign package lazy data object to a env variable cds_table <- refseq_gff_unnest_with_chrom_cds extdata_dir <- system.file(\"extdata\", package = \"mdlvalr\", mustWork = TRUE) var_100ug <- Sys.glob(glue(\"{extdata_dir}/hybcap_v1.0/*-100_*_filtered_integrated_variant_output_summary.xlsx\")) var_150ug <- Sys.glob(glue(\"{extdata_dir}/hybcap_v1.0/*-150_*_filtered_integrated_variant_output_summary.xlsx\")) cov_100ug <- Sys.glob(glue(\"{extdata_dir}/hybcap_v1.0/*-100_*_coverage_summary.xlsx\")) cov_150ug <- Sys.glob(glue(\"{extdata_dir}/hybcap_v1.0/*-150_*_coverage_summary.xlsx\")) sample_sheet <- tibble::tibble(     var_path_1 = Sys.glob(glue(\"{extdata_dir}/hybcap_v1.0/*-100_*_filtered_integrated_variant_output_summary.xlsx\")),     var_path_2 = Sys.glob(glue(\"{extdata_dir}/hybcap_v1.0/*-150_*_filtered_integrated_variant_output_summary.xlsx\")),     cov_path_1 = Sys.glob(glue(\"{extdata_dir}/hybcap_v1.0/*-100_*_coverage_summary.xlsx\")),     cov_path_2 = Sys.glob(glue(\"{extdata_dir}/hybcap_v1.0/*-150_*_coverage_summary.xlsx\")) ) %>%     dplyr::mutate(comparison_name_1 = str_remove(basename(var_path_1), \"_.*$\")) %>%     dplyr::mutate(comparison_name_2 = str_remove(basename(var_path_2), \"_.*$\")) %>%     dplyr::mutate(comparison_name = glue(\"{comparison_name_1}_vs_{comparison_name_2}\"))"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/articles/hybcap.html","id":"run-concordance","dir":"Articles","previous_headings":"","what":"Run concordance","title":"Example: hybcap","text":"","code":"mdlvalr_list <- get_data(sample_sheet, pipeline = \"hybcap\")  mdlvalr_list <- add_flags(     mdlvalr_list,     cds_table = cds_table,     var_pass_fail_logic = \"VAF >= 0.05\",     cov_pass_fail_logic = \"fraction_125x >= 0.9\" )  mdlvalr_list <- compare_vars(mdlvalr_list) mdlvalr_list <- add_var_labels(mdlvalr_list) mdlvalr_list <- filter_data(mdlvalr_list) mdlvalr_list <- get_stats(mdlvalr_list)"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/articles/hybcap.html","id":"create-output-files","dir":"Articles","previous_headings":"","what":"Create output files","title":"Example: hybcap","text":"","code":"export_excel(mdlvalr_list, filename_prefix = \"vaf_0.05_\")"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/articles/hybcap.html","id":"explore-the-mdlvalr_list-object","dir":"Articles","previous_headings":"","what":"Explore the mdlvalr_list object","title":"Example: hybcap","text":"View list object Print summary stats table Names filtered table outputs first comparison","code":"# Show the list-of-lists object glimpse(mdlvalr_list) #> List of 4 #>  $ pipeline    : chr \"hybcap\" #>  $ sample_sheet: tibble [4 × 7] (S3: tbl_df/tbl/data.frame) #>   ..$ var_path_1       : chr [1:4] \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01011-100_2022_0121_1317_filtered_int\"| __truncated__ \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01012-100_2022_0121_1326_filtered_int\"| __truncated__ \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01013-100_2022_0121_1305_filtered_int\"| __truncated__ \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01014-100_2022_0121_1314_filtered_int\"| __truncated__ #>   ..$ var_path_2       : chr [1:4] \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01011-150_2022_0121_1319_filtered_int\"| __truncated__ \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01012-150_2022_0121_1324_filtered_int\"| __truncated__ \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01013-150_2022_0121_1309_filtered_int\"| __truncated__ \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01014-150_2022_0121_1316_filtered_int\"| __truncated__ #>   ..$ cov_path_1       : chr [1:4] \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01011-100_2022_0121_1317_coverage_summary.xlsx\" \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01012-100_2022_0121_1326_coverage_summary.xlsx\" \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01013-100_2022_0121_1305_coverage_summary.xlsx\" \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01014-100_2022_0121_1314_coverage_summary.xlsx\" #>   ..$ cov_path_2       : chr [1:4] \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01011-150_2022_0121_1319_coverage_summary.xlsx\" \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01012-150_2022_0121_1324_coverage_summary.xlsx\" \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01013-150_2022_0121_1309_coverage_summary.xlsx\" \"/tmp/RtmpEqYD6F/temp_libpath3ebaa02c08ac30/mdlvalr/extdata/hybcap_v1.0/01-01014-150_2022_0121_1316_coverage_summary.xlsx\" #>   ..$ comparison_name_1: chr [1:4] \"01-01011-100\" \"01-01012-100\" \"01-01013-100\" \"01-01014-100\" #>   ..$ comparison_name_2: chr [1:4] \"01-01011-150\" \"01-01012-150\" \"01-01013-150\" \"01-01014-150\" #>   ..$ comparison_name  : 'glue' chr [1:4] \"01-01011-100_vs_01-01011-150\" \"01-01012-100_vs_01-01012-150\" \"01-01013-100_vs_01-01013-150\" \"01-01014-100_vs_01-01014-150\" #>  $ summary     : tibble [4 × 32] (S3: tbl_df/tbl/data.frame) #>   ..$ comparison_name                  : chr [1:4] \"01-01011-100_vs_01-01011-150\" \"01-01012-100_vs_01-01012-150\" \"01-01013-100_vs_01-01013-150\" \"01-01014-100_vs_01-01014-150\" #>   ..$ s1_name                          : chr [1:4] \"01-01011-100\" \"01-01012-100\" \"01-01013-100\" \"01-01014-100\" #>   ..$ s2_name                          : chr [1:4] \"01-01011-150\" \"01-01012-150\" \"01-01013-150\" \"01-01014-150\" #>   ..$ n_vars_in_s1                     : int [1:4] 540 625 535 592 #>   ..$ n_vars_in_s2                     : int [1:4] 533 611 573 613 #>   ..$ n_vars_in_s1pass                 : int [1:4] 484 523 526 540 #>   ..$ n_vars_in_s2pass                 : int [1:4] 489 514 538 548 #>   ..$ n_vars_in_common                 : int [1:4] 456 520 481 513 #>   ..$ n_vars_in_common_s1pass_s2pass   : int [1:4] 426 462 474 486 #>   ..$ n_vars_in_common_s1pass_s2fail   : int [1:4] 1 5 1 3 #>   ..$ n_vars_in_common_s1fail_s2pass   : int [1:4] 7 6 2 3 #>   ..$ n_vars_in_common_s1fail_s2fail   : int [1:4] 22 47 4 21 #>   ..$ n_vars_in_s1_not_in_s2           : int [1:4] 84 105 54 79 #>   ..$ n_vars_in_s1pass_not_in_s2       : int [1:4] 57 56 51 51 #>   ..$ n_vars_in_s1pass_in_cds_not_in_s2: int [1:4] 0 1 5 4 #>   ..$ n_vars_in_s1fail_not_in_s2       : int [1:4] 27 49 3 28 #>   ..$ n_vars_in_s2_not_in_s1           : int [1:4] 77 91 92 100 #>   ..$ n_vars_in_s2pass_not_in_s1       : int [1:4] 56 46 62 59 #>   ..$ n_vars_in_s2pass_in_cds_not_in_s1: int [1:4] 0 0 5 1 #>   ..$ n_vars_in_s2fail_not_in_s1       : int [1:4] 21 45 30 41 #>   ..$ n_exons_in_s1                    : int [1:4] 2060 2060 2060 2060 #>   ..$ n_exons_in_s2                    : int [1:4] 2060 2060 2060 2060 #>   ..$ n_exons_in_s1pass                : int [1:4] 1820 1972 600 1511 #>   ..$ n_exons_in_s2pass                : int [1:4] 1836 1949 1372 1689 #>   ..$ n_exons_in_s1fail                : int [1:4] 240 88 1460 549 #>   ..$ n_exons_in_s2fail                : int [1:4] 224 111 688 371 #>   ..$ frac_concordance_raw             : chr [1:4] \"0.779\" \"0.803\" \"0.803\" \"0.807\" #>   ..$ frac_concordance_threshold       : chr [1:4] \"0.79\" \"0.819\" \"0.807\" \"0.815\" #>   ..$ frac_concordance_corrected       : chr [1:4] \"1.00\" \"0.998\" \"0.979\" \"0.99\" #>   ..$ frac_discrep_threshold           : chr [1:4] \"0.071\" \"0.108\" \"0.027\" \"0.055\" #>   ..$ frac_exons_fail_s1               : chr [1:4] \"0.117\" \"0.043\" \"0.709\" \"0.267\" #>   ..$ frac_exons_fail_s2               : chr [1:4] \"0.109\" \"0.054\" \"0.334\" \"0.18\" #>  $ comparisons :List of 4 #>   ..$ 01-01011-100_vs_01-01011-150:List of 6 #>   .. ..$ input_data   :List of 4 #>   .. ..$ flagged_data :List of 4 #>   .. ..$ compared_data:List of 6 #>   .. ..$ labeled_data :List of 4 #>   .. ..$ filtered_data:List of 16 #>   .. ..$ summary      :List of 32 #>   ..$ 01-01012-100_vs_01-01012-150:List of 6 #>   .. ..$ input_data   :List of 4 #>   .. ..$ flagged_data :List of 4 #>   .. ..$ compared_data:List of 6 #>   .. ..$ labeled_data :List of 4 #>   .. ..$ filtered_data:List of 16 #>   .. ..$ summary      :List of 32 #>   ..$ 01-01013-100_vs_01-01013-150:List of 6 #>   .. ..$ input_data   :List of 4 #>   .. ..$ flagged_data :List of 4 #>   .. ..$ compared_data:List of 6 #>   .. ..$ labeled_data :List of 4 #>   .. ..$ filtered_data:List of 16 #>   .. ..$ summary      :List of 32 #>   ..$ 01-01014-100_vs_01-01014-150:List of 6 #>   .. ..$ input_data   :List of 4 #>   .. ..$ flagged_data :List of 4 #>   .. ..$ compared_data:List of 6 #>   .. ..$ labeled_data :List of 4 #>   .. ..$ filtered_data:List of 16 #>   .. ..$ summary      :List of 32 #>  - attr(*, \"class\")= chr [1:2] \"hybcap\" \"list\" mdlvalr_list$summary %>%     print(width = Inf, n = 6) #> # A tibble: 4 × 32 #>   comparison_name              s1_name      s2_name      n_vars_in_s1 #>   <chr>                        <chr>        <chr>               <int> #> 1 01-01011-100_vs_01-01011-150 01-01011-100 01-01011-150          540 #> 2 01-01012-100_vs_01-01012-150 01-01012-100 01-01012-150          625 #> 3 01-01013-100_vs_01-01013-150 01-01013-100 01-01013-150          535 #> 4 01-01014-100_vs_01-01014-150 01-01014-100 01-01014-150          592 #>   n_vars_in_s2 n_vars_in_s1pass n_vars_in_s2pass n_vars_in_common #>          <int>            <int>            <int>            <int> #> 1          533              484              489              456 #> 2          611              523              514              520 #> 3          573              526              538              481 #> 4          613              540              548              513 #>   n_vars_in_common_s1pass_s2pass n_vars_in_common_s1pass_s2fail #>                            <int>                          <int> #> 1                            426                              1 #> 2                            462                              5 #> 3                            474                              1 #> 4                            486                              3 #>   n_vars_in_common_s1fail_s2pass n_vars_in_common_s1fail_s2fail #>                            <int>                          <int> #> 1                              7                             22 #> 2                              6                             47 #> 3                              2                              4 #> 4                              3                             21 #>   n_vars_in_s1_not_in_s2 n_vars_in_s1pass_not_in_s2 #>                    <int>                      <int> #> 1                     84                         57 #> 2                    105                         56 #> 3                     54                         51 #> 4                     79                         51 #>   n_vars_in_s1pass_in_cds_not_in_s2 n_vars_in_s1fail_not_in_s2 #>                               <int>                      <int> #> 1                                 0                         27 #> 2                                 1                         49 #> 3                                 5                          3 #> 4                                 4                         28 #>   n_vars_in_s2_not_in_s1 n_vars_in_s2pass_not_in_s1 #>                    <int>                      <int> #> 1                     77                         56 #> 2                     91                         46 #> 3                     92                         62 #> 4                    100                         59 #>   n_vars_in_s2pass_in_cds_not_in_s1 n_vars_in_s2fail_not_in_s1 n_exons_in_s1 #>                               <int>                      <int>         <int> #> 1                                 0                         21          2060 #> 2                                 0                         45          2060 #> 3                                 5                         30          2060 #> 4                                 1                         41          2060 #>   n_exons_in_s2 n_exons_in_s1pass n_exons_in_s2pass n_exons_in_s1fail #>           <int>             <int>             <int>             <int> #> 1          2060              1820              1836               240 #> 2          2060              1972              1949                88 #> 3          2060               600              1372              1460 #> 4          2060              1511              1689               549 #>   n_exons_in_s2fail frac_concordance_raw frac_concordance_threshold #>               <int> <chr>                <chr>                      #> 1               224 0.779                0.79                       #> 2               111 0.803                0.819                      #> 3               688 0.803                0.807                      #> 4               371 0.807                0.815                      #>   frac_concordance_corrected frac_discrep_threshold frac_exons_fail_s1 #>   <chr>                      <chr>                  <chr>              #> 1 1.00                       0.071                  0.117              #> 2 0.998                      0.108                  0.043              #> 3 0.979                      0.027                  0.709              #> 4 0.99                       0.055                  0.267              #>   frac_exons_fail_s2 #>   <chr>              #> 1 0.109              #> 2 0.054              #> 3 0.334              #> 4 0.18 names(mdlvalr_list$comparisons[[1]]$filtered_data) #>  [1] \"vars_in_s1pass\"                  \"vars_in_s2pass\"                  #>  [3] \"vars_in_common_s1pass_s2pass\"    \"vars_in_common_s1pass_s2fail\"    #>  [5] \"vars_in_common_s1fail_s2pass\"    \"vars_in_common_s1fail_s2fail\"    #>  [7] \"vars_in_s1pass_not_in_s2\"        \"vars_in_s1pass_in_cds_not_in_s2\" #>  [9] \"vars_in_s1fail_not_in_s2\"        \"vars_in_s2pass_not_in_s1\"        #> [11] \"vars_in_s2pass_in_cds_not_in_s1\" \"vars_in_s2fail_not_in_s1\"        #> [13] \"exons_in_s1pass\"                 \"exons_in_s2pass\"                 #> [15] \"exons_in_s1fail\"                 \"exons_in_s2fail\""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Todd Knutson. Author, maintainer. Christine O'Connor. Author.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Knutson T, O'Connor C (2023). mdlvalr: Validation Concordance Analysis MDL Pipelines. https://pages.github.umn.edu/msi/mdlvalr, https://github.umn.edu/msi/mdlvalr.","code":"@Manual{,   title = {mdlvalr: Validation and Concordance Analysis for MDL Pipelines},   author = {Todd Knutson and Christine O'Connor},   year = {2023},   note = {https://pages.github.umn.edu/msi/mdlvalr, https://github.umn.edu/msi/mdlvalr}, }"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/index.html","id":"mdlvalr-","dir":"","previous_headings":"","what":"Validation and Concordance Analysis for MDL Pipelines","title":"Validation and Concordance Analysis for MDL Pipelines","text":"R package can used facilitate validation MDL pipelines R.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Validation and Concordance Analysis for MDL Pipelines","text":"Installing package GitHub Enterprise (organization) account requires extra arguments, including authorization token. authorization token set expire 2023-09-30. Please let know expired issues installing GitHub. package also depends plyranges R package Bioconductor. make sure installed first.","code":"# If you need to install plyranges if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"plyranges\")  # Install mdlvalr remotes::install_github(\"msi/mdlvalr\", host = \"github.umn.edu/api/v3\", auth_token = \"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\")"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/index.html","id":"about-the-package","dir":"","previous_headings":"","what":"About the package","title":"Validation and Concordance Analysis for MDL Pipelines","text":"design rationale package can found article/vignette.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Validation and Concordance Analysis for MDL Pipelines","text":"Follow example analysis hybcap pipeline article/vignette.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"Validation and Concordance Analysis for MDL Pipelines","text":"package uses generic functions pipeline specific methods. explore source code within R, try following examples.","code":"library(mdlvalr)  # List the available methods for this generic function methods(compare_vars)  # Show the source code for the method: \"hybcap\" getAnywhere(compare_vars.hybcap) mdlvalr:::compare_vars.hybcap"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_cds_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a within CDS flag column to var table — add_cds_column","title":"Add a within CDS flag column to var table — add_cds_column","text":"Add column variant table indicates whether start position variant within refseq CDS region.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_cds_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a within CDS flag column to var table — add_cds_column","text":"","code":"add_cds_column(var_tbl, cds_table)"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_cds_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a within CDS flag column to var table — add_cds_column","text":"var_tbl Tibble variants. Must columns named: \"chr\", \"start\", \"end\". Must column named \"type\", column joined cds_table. cds_table Tibble RefSeq gff includes CDS regions. Must column name: \"chr\", \"start\", \"end\", \"type\" indicates CDS .","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_cds_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a within CDS flag column to var table — add_cds_column","text":"Returns var_tbl input, includes additional column named \"within_refseq_cds\" indicate variant start position overlaps CDS region.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_flags.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new flag columns to variant and coverage tables — add_flags","title":"Add new flag columns to variant and coverage tables — add_flags","text":"Add new flag columns variant coverage tables","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_flags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new flag columns to variant and coverage tables — add_flags","text":"","code":"add_flags(   mdlvalr_list,   pipeline = NULL,   cds_table = NULL,   var_pass_fail_logic = \"TRUE\",   cov_pass_fail_logic = \"TRUE\" )  # S3 method for hybcap add_flags(   mdlvalr_list,   pipeline = \"hybcap\",   cds_table = NULL,   var_pass_fail_logic = \"TRUE\",   cov_pass_fail_logic = \"TRUE\" )"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_flags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new flag columns to variant and coverage tables — add_flags","text":"mdlvalr_list standard mdlvalr_list object (generated get_stats()). class object can used automatically determine function methods used. pipeline Standard name pipeline data derived. cds_table tibble object contains RefSeq CDS info. See also add_cds_column(). var_pass_fail_logic logic statement can applied variant input table, TRUE returns \"pass\" FALSE returns \"fail\" character string. Default \"TRUE\", resulting variants getting \"pass\" label. cov_pass_fail_logic logic statement can applied coverage input table, TRUE returns \"pass\" FALSE returns \"fail\" character string. Default \"TRUE\", resulting variants getting \"pass\" label.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_flags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new flag columns to variant and coverage tables — add_flags","text":"Returns standard mdlvalr_list object (.e. regular R list lists) contains tables named list elements. class retuned object updated include name pipeline. facilitates use alternative methods downstream functions.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_flags.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Add new flag columns to variant and coverage tables — add_flags","text":"function generic, means different implementations (methods) can executed different classes. class first argument determine method used. See documentation individual methods extra arguments differences behaviour.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_flags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add new flag columns to variant and coverage tables — add_flags","text":"","code":"if (FALSE) { class(mdlvalr_list) # [1] \"hybcap\" \"list\" mdlvalr_list <- add_flags(mdlvalr_list,     cds_table,     var_pass_fail_logic = \"VAF >= 0.05\",     cov_pass_fail_logic = \"fraction_125x >= 0.9\") }"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_var_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns to compared data that labels variants into groups — add_var_labels","title":"Add columns to compared data that labels variants into groups — add_var_labels","text":"Add columns compared data labels variants groups","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_var_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns to compared data that labels variants into groups — add_var_labels","text":"","code":"add_var_labels(mdlvalr_list, pipeline = NULL)  # S3 method for hybcap add_var_labels(mdlvalr_list, pipeline = \"hybcap\")"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_var_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns to compared data that labels variants into groups — add_var_labels","text":"mdlvalr_list standard mdlvalr_list object (generated compare_data()). class object can used automatically determine function methods used. pipeline Standard name pipeline data derived.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_var_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns to compared data that labels variants into groups — add_var_labels","text":"Returns standard mdlvalr_list object (.e. regular R list lists) contains tables named list elements. class retuned object updated include name pipeline. facilitates use alternative methods downstream functions.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_var_labels.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Add columns to compared data that labels variants into groups — add_var_labels","text":"function generic, means different implementations (methods) can executed different classes. class first argument determine method used. See documentation individual methods extra arguments differences behaviour.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/add_var_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add columns to compared data that labels variants into groups — add_var_labels","text":"","code":"if (FALSE) { class(mdlvalr_list) # [1] \"hybcap\" \"list\" mdlvalr_list <- add_var_labels(     mdlvalr_list,     pipeline = \"hybcap\") }"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/compare_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare samples using join functions — compare_vars","title":"Compare samples using join functions — compare_vars","text":"Compare samples using join functions","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/compare_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare samples using join functions — compare_vars","text":"","code":"compare_vars(   mdlvalr_list,   pipeline = NULL,   match_by_colnames = NULL,   suffix_names = c(\".sample1\", \".sample2\") )  # S3 method for hybcap compare_vars(   mdlvalr_list,   pipeline = \"hybcap\",   match_by_colnames = c(\"CHROM\", \"POS\", \"REF\", \"ALT\", \"GENE\", \"EXON\"),   suffix_names = c(\".sample1\", \".sample2\") )"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/compare_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare samples using join functions — compare_vars","text":"mdlvalr_list standard mdlvalr_list object (generated get_flags()). class object can used automatically determine function methods used. pipeline Standard name pipeline data derived. match_by_colnames vector column names present sample variant table. columns used joining tables (thus, rows exact matching data merged). suffix_names character vector length two, provides suffix string append column names sample, making colnames unique.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/compare_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare samples using join functions — compare_vars","text":"Returns standard mdlvalr_list object (.e. regular R list lists) contains tables named list elements. class retuned object updated include name pipeline. facilitates use alternative methods downstream functions.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/compare_vars.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Compare samples using join functions — compare_vars","text":"function generic, means different implementations (methods) can executed different classes. class first argument determine method used. See documentation individual methods extra arguments differences behaviour.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/compare_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare samples using join functions — compare_vars","text":"","code":"if (FALSE) { class(mdlvalr_list) # [1] \"hybcap\" \"list\" mdlvalr_list <- compare_vars(     mdlvalr_list,     pipeline = \"hybcap\",     match_by_colnames = c(\"CHROM\", \"POS\", \"REF\", \"ALT\", \"GENE\", \"EXON\"),     suffix_names = c(\".sample1\", \".sample2\")) }"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/export_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Excel files containing all sumarized data within tabs — export_excel","title":"Write Excel files containing all sumarized data within tabs — export_excel","text":"Write Excel files containing sumarized data within tabs Export data Excel files using tabs","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/export_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Excel files containing all sumarized data within tabs — export_excel","text":"","code":"export_excel(mdlvalr_list, pipeline = NULL, filename_prefix = \"\")  # S3 method for hybcap export_excel(mdlvalr_list, pipeline = \"hybcap\", filename_prefix = \"\")"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/export_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Excel files containing all sumarized data within tabs — export_excel","text":"mdlvalr_list standard mdlvalr_list object (generated compare_data()). class object can used automatically determine function methods used. pipeline Standard name pipeline data derived. filename_prefix String filepath glued prefix output filename.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/export_excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Excel files containing all sumarized data within tabs — export_excel","text":"Returns standard mdlvalr_list object (.e. regular R list lists) contains tables named list elements. class retuned object updated include name pipeline. facilitates use alternative methods downstream functions.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/export_excel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Write Excel files containing all sumarized data within tabs — export_excel","text":"function generic, means different implementations (methods) can executed different classes. class first argument determine method used. See documentation individual methods extra arguments differences behaviour.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/export_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Excel files containing all sumarized data within tabs — export_excel","text":"","code":"if (FALSE) { class(mdlvalr_list) # [1] \"hybcap\" \"list\" mdlvalr_list <- export_excel(     mdlvalr_list,     pipeline = \"hybcap\",     filename_prefix = \"logic_VAF_gt_0.05_\") }"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/filter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter compared data into sub-tables based on vairant labels — filter_data","title":"Filter compared data into sub-tables based on vairant labels — filter_data","text":"Filter compared data sub-tables based vairant labels","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/filter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter compared data into sub-tables based on vairant labels — filter_data","text":"","code":"filter_data(mdlvalr_list, pipeline = NULL)  # S3 method for hybcap filter_data(mdlvalr_list, pipeline = \"hybcap\")"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/filter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter compared data into sub-tables based on vairant labels — filter_data","text":"mdlvalr_list standard mdlvalr_list object (generated add_var_labels()). class object can used automatically determine function methods used. pipeline Standard name pipeline data derived.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/filter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter compared data into sub-tables based on vairant labels — filter_data","text":"Returns standard mdlvalr_list object (.e. regular R list lists) contains tables named list elements. class retuned object updated include name pipeline. facilitates use alternative methods downstream functions.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/filter_data.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Filter compared data into sub-tables based on vairant labels — filter_data","text":"function generic, means different implementations (methods) can executed different classes. class first argument determine method used. See documentation individual methods extra arguments differences behaviour.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/filter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter compared data into sub-tables based on vairant labels — filter_data","text":"","code":"if (FALSE) { class(mdlvalr_list) # [1] \"hybcap\" \"list\" mdlvalr_list <- filter_data(     mdlvalr_list,     pipeline = \"hybcap\") }"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read pipeline files into a list — get_data","title":"Read pipeline files into a list — get_data","text":"Read pipeline files list","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read pipeline files into a list — get_data","text":"","code":"get_data(sample_sheet, pipeline)"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read pipeline files into a list — get_data","text":"sample_sheet Name tibble data.frame contains sample info. One set comparisons per row table. five required column names: (1) comparison_name (e.g. \"sample1_run1_vs_sample1_run2\"). (2, 3) var_path_1 var_path_2 provide complete paths variant files. (4, 5) cov_path_1 cov_path_2 provide complete paths coverage files. pipeline Standard name pipeline data derived","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read pipeline files into a list — get_data","text":"Returns standard mdlvalr_list object (.e. regular R list lists) contains tables named list elements. class retuned object updated include name pipeline. facilitates use alternative methods downstream functions.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read pipeline files into a list — get_data","text":"","code":"if (FALSE) { mdlvalr_list <- get_data(sample_sheet, pipeline = \"hybcap\") }"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate summary statistics of concordance tables — get_stats","title":"Calculate summary statistics of concordance tables — get_stats","text":"Calculate summary statistics concordance tables","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate summary statistics of concordance tables — get_stats","text":"","code":"get_stats(mdlvalr_list, pipeline = NULL)  # S3 method for hybcap get_stats(mdlvalr_list, pipeline = \"hybcap\")"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate summary statistics of concordance tables — get_stats","text":"mdlvalr_list standard mdlvalr_list object (generated get_stats()). class object can used automatically determine function methods used. pipeline Standard name pipeline data derived.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate summary statistics of concordance tables — get_stats","text":"Returns standard mdlvalr_list object (.e. regular R list lists) contains tables named list elements. class retuned object updated include name pipeline. facilitates use alternative methods downstream functions.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_stats.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Calculate summary statistics of concordance tables — get_stats","text":"function generic, means different implementations (methods) can executed different classes. class first argument determine method used. See documentation individual methods extra arguments differences behaviour.","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/reference/get_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate summary statistics of concordance tables — get_stats","text":"","code":"if (FALSE) { class(mdlvalr_list) # [1] \"hybcap\" \"list\"  mdlvalr_list <- get_stats(mdlvalr_list) }"},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/news/index.html","id":"mdlvalr-040","dir":"Changelog","previous_headings":"","what":"mdlvalr 0.4.0","title":"mdlvalr 0.4.0","text":"Removed validate_samples() function specific simple use-case. Instead, standardized sample sheet supplied get_data() function start analysis. Creating sample sheet can done variety ways scope right now. Updated documentation Changed getting started article/vignette example hybcap pipeline specifically. addition, example files included package streamlined. vignette can run anywhere using provided input files. Added new article/vignette called “” describes big picture package ’s functions","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/news/index.html","id":"mdlvalr-030","dir":"Changelog","previous_headings":"","what":"mdlvalr 0.3.0","title":"mdlvalr 0.3.0","text":"First beta release functions documented","code":""},{"path":"https://pages.github.umn.edu/msi/mdlvalr/index.html/news/index.html","id":"mdlvalr-020","dir":"Changelog","previous_headings":"","what":"mdlvalr 0.2.0","title":"mdlvalr 0.2.0","text":"Undocumented alpha version Includes major functions Includes “Getting started” vignette example input files","code":""}]
